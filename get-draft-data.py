import argparse
from os.path import exists
from datetime import date
from typing import Tuple
import json
from espn_api import requests
from src.espn_api_custom import League
import sqlite3

def get_args() -> argparse.Namespace:
    """
    Get command line arguments
    """
    parser = argparse.ArgumentParser(description='Get credential values by loging into espn league, inspect page, '
                                                 'Application tab -> Storage -> Cookies -> "http://fantasy.espn.com". '
                                                 'Find required values in the list.')
    parser.add_argument('--league_id', type=int, help='Id of the fantasy league', required=True)
    parser.add_argument('--full_history', action='store_true', help='Flag to indicate that data needs to be requested from the begining of time. \nDefault False\nHistory begins at 2019 as espn released new API around that time, but user can not request data for years it was not part of the league.')
    return parser.parse_args()

def get_years(flag) -> list:
    """
    Generate a list of years to get data about players for.
    It starts at 2019 due to the fact that current API does not support earlier years.
    """
    # TODO dynamicaly get data from the DB and workout what years needs to be requested
    if flag:
        init_year = 2019
    else:
        init_year = date.today().year
    current_year = date.today().year
    current_month = date.today().month

    # next year season is generated by espn somewhere in August
    # predictions for the next season are generated by espn somewhere in September
    # hence the range offset, otherwise if run during Jan - July
    # it would try to request data for the year that does not exist
    offset = 2
    if current_month in range(1, 7):
        offset = 1

    ret = list(range(init_year, current_year+offset))
    # need to reverse the range, as current year is used as 'init' for the data schema
    # and uses players map from a current year
    ret.reverse()
    return ret

def main(league_id, full_history):

    if exists(f'espn-data/{league_id}'):
        db = sqlite3.connect(f'espn-data/{league_id}/league.db')
        auth = json.load(open(f'espn-data/{league_id}/auth.json', 'r'))
    else:
        print(f'Unable to locate data for League_id: {league_id}. \nSetup with "init-new-league.py"')
        exit(-1)
    
    # years = get_years(full_history)
    # years = [2024, 2023, 2022, 2021, 2020, 2019]
    years = [2023]

    kwargs = {
        'league_id': league_id,
        'espn_s2': auth['espn_s2'],
        'swid': auth['swid'],
        'year': years[0]
    }
    league = League(**kwargs)
    fa = league.free_agents(size=10000)
    draft = league.espn_request.get_league_draft()
    pass

if __name__ == '__main__':
    args = get_args()
    main(args.league_id, args.full_history)
